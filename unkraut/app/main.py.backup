# app/main.py - Erweitert mit Roboterarm-Integration
"""
Unkraut-2025 Flask Hauptanwendung - Mit Roboterarm
"""
from flask import Flask, render_template, jsonify, request, Response
from flask_socketio import SocketIO, emit
import threading
import time
import os

# Module importieren
from app.utils.robot_controller import robot_controller
from app.utils.camera_handler import camera_handler
from config.app_config import config

def create_app():
    app = Flask(__name__)
    app.config['SECRET_KEY'] = config.SECRET_KEY
    
    # SocketIO für Echtzeitdaten
    socketio = SocketIO(app, cors_allowed_origins="*")
    
    # Verzeichnisse erstellen
    for directory in [config.DATA_DIR, config.IMAGE_DIR, config.VIDEO_DIR, 
                     config.LOG_DIR, config.BACKUP_DIR]:
        os.makedirs(directory, exist_ok=True)
    
    # ===== HAUPTROUTEN =====
    @app.route('/')
    def dashboard():
        return render_template('dashboard.html')
    
    @app.route('/control')
    def control_panel():
        return render_template('control.html')
    
    @app.route('/camera')
    def camera_view():
        return render_template('camera.html')
    
    @app.route('/arm')
    def arm_control():
        return render_template('arm_control.html')
    
    @app.route('/settings')
    def settings():
        return render_template('settings.html')
    
    @app.route('/ai')
    def ai_panel():
        return render_template('ai.html')
    
    # ===== KAMERA API (bestehend) =====
    @app.route('/api/camera/stream')
    def video_stream():
        return Response(camera_handler.get_video_stream(),
                       mimetype='multipart/x-mixed-replace; boundary=frame')
    
    @app.route('/api/camera/start', methods=['POST'])
    def start_camera():
        from hardware.camera import camera_manager
        success = camera_manager.start_stream()
        return jsonify({'status': 'started' if success else 'failed'})
    
    @app.route('/api/camera/stop', methods=['POST'])
    def stop_camera():
        from hardware.camera import camera_manager
        camera_manager.stop_stream()
        return jsonify({'status': 'stopped'})
    
    @app.route('/api/camera/capture', methods=['POST'])
    def capture_image():
        filename = camera_handler.capture_image()
        if filename:
            return jsonify({'status': 'captured', 'filename': filename})
        return jsonify({'error': 'Capture failed'}), 500
    
    # ===== ROBOTERARM API (NEU) =====
    @app.route('/api/arm/info')
    def get_arm_info():
        try:
            from hardware.robot_arm import robot_arm
            info = robot_arm.get_arm_info()
            return jsonify(info)
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    @app.route('/api/arm/position')
    def get_arm_position():
        try:
            from hardware.robot_arm import robot_arm
            position = robot_arm.get_current_position()
            return jsonify({'position': position})
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    @app.route('/api/arm/move/joint', methods=['POST'])
    def move_arm_joint():
        try:
            data = request.get_json()
            joint = data.get('joint')
            angle = data.get('angle')
            
            if not joint or angle is None:
                return jsonify({'error': 'Joint und Angle erforderlich'}), 400
            
            from hardware.robot_arm import robot_arm
            success = robot_arm.move_joint(joint, float(angle))
            
            if success:
                return jsonify({'status': 'success', 'joint': joint, 'angle': angle})
            else:
                return jsonify({'error': 'Bewegung fehlgeschlagen'}), 500
                
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    @app.route('/api/arm/move/preset', methods=['POST'])
    def move_arm_to_preset():
        try:
            data = request.get_json()
            preset = data.get('preset')
            duration = data.get('duration', 2.0)
            
            if not preset:
                return jsonify({'error': 'Preset erforderlich'}), 400
            
            from hardware.robot_arm import robot_arm
            success = robot_arm.move_to_preset(preset, duration)
            
            if success:
                return jsonify({'status': 'success', 'preset': preset, 'duration': duration})
            else:
                return jsonify({'error': f'Preset {preset} nicht gefunden'}), 404
                
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    @app.route('/api/arm/weed_removal', methods=['POST'])
    def arm_weed_removal_sequence():
        try:
            data = request.get_json() or {}
            target_x = data.get('target_x', 0)
            target_y = data.get('target_y', 0)
            
            from hardware.robot_arm import robot_arm
            
            # Sequenz in separatem Thread
            threading.Thread(
                target=robot_arm.weed_removal_sequence,
                args=(target_x, target_y),
                daemon=True
            ).start()
            
            return jsonify({
                'status': 'sequence_started',
                'target_x': target_x,
                'target_y': target_y
            })
            
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    @app.route('/api/arm/emergency_stop', methods=['POST'])
    def arm_emergency_stop():
        try:
            from hardware.robot_arm import robot_arm
            robot_arm.emergency_stop()
            return jsonify({'status': 'emergency_stop_activated'})
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    # ===== STEUERUNGS API (bestehend) =====
    @app.route('/api/control/move', methods=['POST'])
    def move_robot():
        data = request.get_json()
        direction = data.get('direction')
        speed = data.get('speed', 50)
        duration = data.get('duration', 0.1)
        
        try:
            from hardware.motors import motor_controller
            result = motor_controller.move(direction, speed, duration)
            return jsonify(result)
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    @app.route('/api/control/stop', methods=['POST'])
    def emergency_stop():
        try:
            from hardware.motors import motor_controller
            result = motor_controller.emergency_stop()
            
            # Auch Roboterarm stoppen
            try:
                from hardware.robot_arm import robot_arm
                robot_arm.emergency_stop()
            except:
                pass
            
            return jsonify(result)
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    @app.route('/api/control/status')
    def get_control_status():
        try:
            from hardware.sensors import get_sensor_data
            from hardware.motors import motor_controller
            
            status = {
                'timestamp': int(time.time()),
                'robot': {
                    'mode': robot_controller.current_mode,
                    'is_active': robot_controller.is_active,
                    'motors': motor_controller.get_status()
                },
                'sensors': get_sensor_data(),
                'mission': robot_controller.get_mission_stats(),
                'battery': {
                    'percentage': 85,
                    'voltage': 12.4,
                    'charging': False
                }
            }
            
            # Roboterarm-Status hinzufügen
            try:
                from hardware.robot_arm import robot_arm
                arm_position = robot_arm.get_current_position()
                status['arm'] = {
                    'available': True,
                    'position': arm_position
                }
            except:
                status['arm'] = {'available': False}
            
            return jsonify(status)
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    # ===== AI API (bestehend) =====
    @app.route('/api/ai/detect', methods=['POST'])
    def detect_weeds():
        try:
            from ai.weed_detection import weed_detector
            from hardware.camera import camera_manager
            
            frame_data = camera_manager.get_frame()
            if frame_data:
                result = weed_detector.detect_from_bytes(frame_data)
                
                # Optional: Roboterarm zu erkanntem Unkraut bewegen
                if result.get('detections') and len(result['detections']) > 0:
                    detection = result['detections'][0]  # Erste Erkennung
                    
                    # Koordinaten für Roboterarm (vereinfacht)
                    target_x = detection.get('x', 0)
                    target_y = detection.get('y', 0)
                    
                    # In separatem Thread Arm bewegen
                    try:
                        from hardware.robot_arm import robot_arm
                        threading.Thread(
                            target=robot_arm.weed_removal_sequence,
                            args=(target_x, target_y),
                            daemon=True
                        ).start()
                        result['arm_action'] = 'weed_removal_started'
                    except:
                        result['arm_action'] = 'arm_not_available'
                
                return jsonify(result)
            else:
                return jsonify({'error': 'No camera frame available'}), 400
                
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    # ===== SYSTEM API (bestehend) =====
    @app.route('/api/system/status')
    def system_status():
        try:
            from hardware.sensors import sensor_manager
            
            status = {
                'timestamp': int(time.time()),
                'system': sensor_manager.get_system_stats(),
                'hardware': {
                    'camera_available': True,
                    'gpio_available': False,
                    'mock_mode': True
                }
            }
            
            # Roboterarm-Hardware-Status
            try:
                from hardware.robot_arm import robot_arm
                arm_info = robot_arm.get_arm_info()
                status['hardware']['arm_available'] = arm_info['controller']['hardware_available']
                status['hardware']['servo_count'] = arm_info['controller']['servo_count']
            except:
                status['hardware']['arm_available'] = False
            
            return jsonify(status)
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    # ===== WEBSOCKET EVENTS =====
    @socketio.on('connect')
    def handle_connect():
        print('Client connected')
        emit('status', {'msg': 'Connected to Unkraut-2025'})
    
    @socketio.on('disconnect')
    def handle_disconnect():
        print('Client disconnected')
    
    @socketio.on('arm_move_joint')
    def handle_arm_move(data):
        try:
            from hardware.robot_arm import robot_arm
            joint = data.get('joint')
            angle = data.get('angle')
            
            if joint and angle is not None:
                success = robot_arm.move_joint(joint, float(angle))
                emit('arm_moved', {
                    'status': 'success' if success else 'failed',
                    'joint': joint,
                    'angle': angle
                })
        except Exception as e:
            emit('arm_error', {'error': str(e)})
    
    # ===== HINTERGRUND-TASKS =====
    def background_sensor_thread():
        while True:
            try:
                from hardware.sensors import get_sensor_data
                sensor_data = get_sensor_data()
                
                # Roboterarm-Position hinzufügen
                try:
                    from hardware.robot_arm import robot_arm
                    arm_position = robot_arm.get_current_position()
                    sensor_data['arm_position'] = arm_position
                except:
                    pass
                
                socketio.emit('sensor_data', sensor_data)
                time.sleep(2)
            except Exception as e:
                print(f"Sensor thread error: {e}")
                time.sleep(5)
    
    # Hintergrund-Thread starten
    sensor_thread = threading.Thread(target=background_sensor_thread, daemon=True)
    sensor_thread.start()
    
    app.socketio = socketio
    
    print("✅ Unkraut-2025 Flask App mit Roboterarm vollständig geladen")
    return app

# Für den Import
app = create_app()

# Erweiterte Navigation für base.html
UPDATED_BASE_TEMPLATE_NAV = '''
<!-- Navigation Update für base.html -->
<ul class="navbar-nav me-auto">
    <li class="nav-item">
        <a class="nav-link" href="{{ url_for('dashboard') }}">
            <i class="fas fa-tachometer-alt"></i> Dashboard
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="{{ url_for('control_panel') }}">
            <i class="fas fa-gamepad"></i> Steuerung
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="{{ url_for('arm_control') }}">
            <i class="fas fa-robot"></i> Roboterarm
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="{{ url_for('camera_view') }}">
            <i class="fas fa-camera"></i> Kamera
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="{{ url_for('ai_panel') }}">
            <i class="fas fa-brain"></i> KI-Erkennung
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="{{ url_for('settings') }}">
            <i class="fas fa-cog"></i> Einstellungen
        </a>
    </li>
</ul>
'''

# CSS Ergänzungen für Roboterarm
ARM_CSS_ADDITIONS = '''
/* Roboterarm spezifische Styles */
.servo-control {
    transition: all 0.3s ease;
}

.servo-control:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.arm-preset-btn {
    transition: all 0.2s ease;
    border-radius: 12px;
}

.arm-preset-btn:hover {
    transform: scale(1.05);
}

.arm-preset-btn:active {
    transform: scale(0.95);
}

.activity-log {
    font-family: 'Courier New', monospace;
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    border-left: 4px solid #007bff;
}

.servo-slider {
    background: linear-gradient(90deg, #dc3545, #ffc107, #28a745);
    height: 8px;
    border-radius: 4px;
}

.servo-angle-display {
    font-weight: bold;
    color: #007bff;
    font-size: 1.1em;
}

/* Responsive Verbesserungen */
@media (max-width: 768px) {
    .arm-preset-btn {
        font-size: 0.8rem;
        padding: 8px;
    }
    
    .servo-control .card-body {
        padding: 0.75rem;
    }
}

/* Animation für Arm-Bewegungen */
@keyframes servo-move {
    0% { background-color: #f8f9fa; }
    50% { background-color: #007bff; }
    100% { background-color: #f8f9fa; }
}

.servo-moving {
    animation: servo-move 1s ease-in-out;
}
'''