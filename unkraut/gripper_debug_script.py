# debug_gripper_camera.py
"""
Diagnose-Script f√ºr Gripper und Kamera-Probleme
"""
import time
import subprocess
import os

def test_gripper():
    """Gripper-spezifische Tests"""
    print("üîß Gripper-Diagnose")
    print("=" * 50)
    
    try:
        from hardware.robot_arm import robot_arm
        
        print("1. Teste alle Servos einzeln...")
        servos = ['base', 'shoulder', 'elbow', 'wrist', 'gripper', 'tool']
        
        for servo in servos:
            print(f"   Teste {servo}...")
            try:
                # Teste Bewegung von aktueller Position zu +10¬∞
                current_pos = robot_arm.get_current_position().get(servo, 90)
                test_pos = min(180, current_pos + 10)
                
                success = robot_arm.move_joint(servo, test_pos)
                time.sleep(0.5)
                
                # Zur√ºck zur urspr√ºnglichen Position
                robot_arm.move_joint(servo, current_pos)
                time.sleep(0.5)
                
                print(f"      {'‚úÖ' if success else '‚ùå'} {servo}: {'OK' if success else 'FEHLER'}")
                
            except Exception as e:
                print(f"      ‚ùå {servo}: Fehler - {e}")
        
        print("\n2. Gripper-spezifische Tests...")
        
        # Teste Gripper mit verschiedenen Winkeln
        test_angles = [0, 45, 90, 135, 180]
        print("   Teste Gripper-Winkel...")
        
        for angle in test_angles:
            print(f"      Gripper ‚Üí {angle}¬∞")
            try:
                success = robot_arm.move_joint('gripper', angle)
                time.sleep(1)
                
                # Pr√ºfe ob Position wirklich gesetzt wurde
                current = robot_arm.get_current_position().get('gripper', -1)
                print(f"         Soll: {angle}¬∞, Ist: {current}¬∞")
                
            except Exception as e:
                print(f"         ‚ùå Fehler: {e}")
        
        print("\n3. Hardware-Diagnose...")
        
        # PCA9685 Kanal-Test
        try:
            from hardware.servo_controller import servo_controller
            
            print("   PCA9685 Kan√§le:")
            if hasattr(servo_controller, 'pca') and servo_controller.pca:
                for channel in range(6):
                    try:
                        # Teste PWM-Signal
                        servo_controller.pca.channels[channel].duty_cycle = 0x1000  # Test-Signal
                        time.sleep(0.1)
                        servo_controller.pca.channels[channel].duty_cycle = 0
                        print(f"      Kanal {channel}: ‚úÖ PWM OK")
                    except Exception as e:
                        print(f"      Kanal {channel}: ‚ùå PWM Fehler - {e}")
            else:
                print("      ‚ö†Ô∏è  PCA9685 nicht verf√ºgbar")
                
        except Exception as e:
            print(f"   ‚ùå Hardware-Test Fehler: {e}")
        
        print("\n4. Gripper-L√∂sungsvorschl√§ge:")
        print("   - Pr√ºfe Stromversorgung (Gripper braucht evtl. mehr Strom)")
        print("   - Pr√ºfe Verkabelung am Kanal 4")
        print("   - Teste Servo an anderem Kanal")
        print("   - Pr√ºfe Servo-Mechanik (evtl. blockiert)")
        
    except Exception as e:
        print(f"‚ùå Gripper-Test fehlgeschlagen: {e}")

def test_camera():
    """Kamera-Diagnose"""
    print("\nüì∑ Kamera-Diagnose")
    print("=" * 50)
    
    print("1. Kamera-Prozesse pr√ºfen...")
    try:
        # Pr√ºfe laufende libcamera-Prozesse
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        libcamera_processes = [line for line in result.stdout.split('\n') if 'libcamera' in line]
        
        if libcamera_processes:
            print("   üîç Laufende libcamera-Prozesse gefunden:")
            for proc in libcamera_processes:
                print(f"      {proc}")
            print("   üí° Diese k√∂nnten die Kamera blockieren")
        else:
            print("   ‚úÖ Keine blockierenden libcamera-Prozesse")
            
    except Exception as e:
        print(f"   ‚ùå Prozess-Check Fehler: {e}")
    
    print("\n2. Kamera-Hardware testen...")
    try:
        # Teste libcamera-hello
        result = subprocess.run(['libcamera-hello', '--list-cameras'], 
                              capture_output=True, text=True, timeout=5)
        
        if result.returncode == 0:
            print("   ‚úÖ libcamera-hello funktioniert")
            print(f"      Output: {result.stdout[:100]}...")
        else:
            print("   ‚ùå libcamera-hello Fehler")
            print(f"      Error: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("   ‚ö†Ô∏è  libcamera-hello Timeout (evtl. OK)")
    except Exception as e:
        print(f"   ‚ùå libcamera-Test Fehler: {e}")
    
    print("\n3. Kamera-Module neu initialisieren...")
    try:
        # Stoppe alle Kamera-Streams
        print("   üõë Stoppe bestehende Kamera-Streams...")
        
        # Importiere und stoppe Kamera
        from hardware.camera import camera_manager
        camera_manager.stop_stream()
        time.sleep(2)
        
        print("   üîÑ Starte Kamera neu...")
        camera_manager._detect_camera()
        
        success = camera_manager.start_stream()
        print(f"   {'‚úÖ' if success else '‚ùå'} Kamera-Neustart: {'Erfolg' if success else 'Fehler'}")
        
        if success:
            time.sleep(2)
            frame = camera_manager.get_frame()
            print(f"   üì∏ Frame-Test: {len(frame) if frame else 0} bytes")
        
    except Exception as e:
        print(f"   ‚ùå Kamera-Neustart Fehler: {e}")
    
    print("\n4. Kamera-L√∂sungsvorschl√§ge:")
    print("   - Stoppe alle libcamera-Prozesse: sudo pkill libcamera")
    print("   - Neustart Kamera-Service: sudo systemctl restart camera")
    print("   - Reboot Pi: sudo reboot")
    print("   - Pr√ºfe Kamera-Kabel")

def fix_camera():
    """Automatische Kamera-Reparatur"""
    print("\nüîß Automatische Kamera-Reparatur")
    print("=" * 40)
    
    try:
        print("1. Stoppe libcamera-Prozesse...")
        subprocess.run(['sudo', 'pkill', '-f', 'libcamera'], timeout=5)
        time.sleep(2)
        
        print("2. Stoppe Python-Kamera-Module...")
        try:
            from hardware.camera import camera_manager
            camera_manager.stop_stream()
        except:
            pass
        
        time.sleep(2)
        
        print("3. Teste Kamera...")
        result = subprocess.run(['libcamera-hello', '--timeout', '1000'], 
                              capture_output=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ Kamera-Fix erfolgreich!")
            
            # Neustart Kamera-Manager
            print("4. Starte Kamera-Manager neu...")
            from hardware.camera import camera_manager
            camera_manager._detect_camera()
            success = camera_manager.start_stream()
            
            if success:
                print("‚úÖ Kamera-Stream wieder aktiv!")
                return True
            else:
                print("‚ö†Ô∏è  Stream-Start teilweise erfolgreich")
                return False
        else:
            print("‚ùå Kamera-Hardware-Problem")
            return False
            
    except Exception as e:
        print(f"‚ùå Kamera-Fix Fehler: {e}")
        return False

def fix_gripper_channel():
    """Teste Gripper auf anderem Kanal"""
    print("\nüîß Gripper-Kanal-Test")
    print("=" * 40)
    
    try:
        from hardware.robot_arm import robot_arm
        
        print("Teste Gripper auf Kanal 5 (Tool-Kanal)...")
        
        # Tempor√§r Gripper auf Tool-Kanal testen
        servo_controller = robot_arm.servo_controller
        
        # Entferne alten Gripper
        if 'gripper' in servo_controller.servos:
            del servo_controller.servos['gripper']
        
        # F√ºge Gripper auf Kanal 5 hinzu
        success = servo_controller.add_servo('gripper_test', 5, default_angle=90)
        
        if success:
            print("‚úÖ Gripper auf Kanal 5 hinzugef√ºgt")
            
            # Teste Bewegung
            test_angles = [45, 135, 90]
            for angle in test_angles:
                servo_controller.set_servo_angle('gripper_test', angle)
                print(f"   Gripper-Test: {angle}¬∞")
                time.sleep(1)
            
            print("üí° Falls das funktioniert: Tausche Gripper und Tool-Kabel")
            return True
        else:
            print("‚ùå Gripper-Test auf Kanal 5 fehlgeschlagen")
            return False
            
    except Exception as e:
        print(f"‚ùå Gripper-Kanal-Test Fehler: {e}")
        return False

if __name__ == '__main__':
    print("üß™ Unkraut-2025 Hardware-Diagnose")
    print("=" * 60)
    
    # Gripper-Tests
    test_gripper()
    
    # Kamera-Tests  
    test_camera()
    
    print("\n" + "=" * 60)
    print("üîß Reparatur-Optionen:")
    print("1. Automatische Kamera-Reparatur")
    print("2. Gripper-Kanal-Test")
    print("3. Beide Reparaturen")
    
    try:
        choice = input("\nW√§hle Option (1/2/3) oder Enter f√ºr keine: ").strip()
        
        if choice == '1':
            fix_camera()
        elif choice == '2':
            fix_gripper_channel()
        elif choice == '3':
            fix_camera()
            time.sleep(2)
            fix_gripper_channel()
        else:
            print("Keine Reparatur gew√§hlt")
            
    except KeyboardInterrupt:
        print("\nüëã Diagnose beendet")
    
    print("\n‚úÖ Diagnose abgeschlossen!")
    print("üí° Starte Flask App neu: python run.py")